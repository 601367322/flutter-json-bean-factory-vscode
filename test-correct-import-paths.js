const { JsonParser } = require('./out/parsers/JsonParser');
const { DartCodeGenerator } = require('./out/generators/DartCodeGenerator');
const fs = require('fs');
const path = require('path');

console.log('üß™ Testing Correct Import Paths Generation\n');

// ÂàõÂª∫ÊµãËØïÁéØÂ¢ÉÔºåÊ®°Êãü‰∏çÂêåË∑ØÂæÑÁöÑentityÊñá‰ª∂
function setupTestEnvironment() {
    const testDir = path.join(__dirname, 'test_import_paths');
    
    // ÂàõÂª∫ÁõÆÂΩïÁªìÊûÑ
    const directories = [
        'lib/modal/response',      // ÂéüÁâàË∑ØÂæÑÈ£éÊ†º
        'lib/models',              // ÈªòËÆ§Ë∑ØÂæÑ
        'lib/entities',            // Ëá™ÂÆö‰πâË∑ØÂæÑ
        'lib/data/models'          // ÂµåÂ•óË∑ØÂæÑ
    ];
    
    directories.forEach(dir => {
        const fullPath = path.join(testDir, dir);
        fs.mkdirSync(fullPath, { recursive: true });
    });
    
    // ÂàõÂª∫‰∏çÂêåË∑ØÂæÑÁöÑentityÊñá‰ª∂
    const entityFiles = [
        {
            path: 'lib/modal/response/app_version_entity.dart',
            className: 'AppVersionEntity'
        },
        {
            path: 'lib/modal/response/login_result_entity.dart',
            className: 'LoginResultEntity'
        },
        {
            path: 'lib/models/user_entity.dart',
            className: 'UserEntity'
        },
        {
            path: 'lib/entities/product_entity.dart',
            className: 'ProductEntity'
        },
        {
            path: 'lib/data/models/customer_entity.dart',
            className: 'CustomerEntity'
        }
    ];
    
    entityFiles.forEach(entity => {
        const fullPath = path.join(testDir, entity.path);
        const content = `import 'package:test_app/generated/json/base/json_field.dart';
import 'dart:convert';

@JsonSerializable()
class ${entity.className} {
	int id = 0;
	String name = '';

	${entity.className}();

	factory ${entity.className}.fromJson(Map<String, dynamic> json) => $${entity.className}FromJson(json);
	Map<String, dynamic> toJson() => $${entity.className}ToJson(this);

	@override
	String toString() {
		return jsonEncode(this);
	}
}`;
        fs.writeFileSync(fullPath, content);
    });
    
    return { testDir, entityFiles };
}

// Ê®°ÊãüÊâ´ÊèèÂäüËÉΩ
async function scanExistingModels(projectRoot, scanPath) {
    const existingModels = [];
    
    const scanPaths = scanPath.split(',').map(p => p.trim());
    
    for (const scanPathItem of scanPaths) {
        if (!scanPathItem) continue;
        
        const fullScanPath = path.join(projectRoot, scanPathItem);
        await scanDirectoryForModels(fullScanPath, existingModels, projectRoot);
    }
    
    // ÂéªÈáç
    const uniqueModels = existingModels.filter((model, index, self) => 
        index === self.findIndex(m => m.className === model.className)
    );
    
    return uniqueModels;
}

async function scanDirectoryForModels(dirPath, existingModels, projectRoot) {
    try {
        if (!fs.existsSync(dirPath)) {
            return;
        }

        const stat = fs.statSync(dirPath);
        if (!stat.isDirectory()) {
            return;
        }

        const files = fs.readdirSync(dirPath);
        
        for (const file of files) {
            const filePath = path.join(dirPath, file);
            const fileStat = fs.statSync(filePath);
            
            if (fileStat.isDirectory()) {
                await scanDirectoryForModels(filePath, existingModels, projectRoot);
            } else if (file.endsWith('.dart')) {
                await scanDartFileForModels(filePath, existingModels, projectRoot);
            }
        }
    } catch (error) {
        console.error(`Error scanning directory ${dirPath}:`, error);
    }
}

async function scanDartFileForModels(filePath, existingModels, projectRoot) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        
        const classMatches = content.matchAll(/@JsonSerializable\(\)\s*class\s+(\w+)/g);
        
        for (const match of classMatches) {
            if (match[1]) {
                const relativePath = path.relative(projectRoot, filePath);
                const importPath = relativePath.replace(/\.dart$/, '').replace(/\\/g, '/');
                
                existingModels.push({
                    className: match[1],
                    filePath: importPath
                });
            }
        }
    } catch (error) {
        console.error(`Error scanning file ${filePath}:`, error);
    }
}

// ÁîüÊàêÂØºÂÖ•ËØ≠Âè•
function generateImports(allClasses, packageName) {
    const imports = [];
    for (const cls of allClasses) {
        if (cls.filePath) {
            // ‰ΩøÁî®ÂÆûÈôÖÁöÑÊñá‰ª∂Ë∑ØÂæÑ
            imports.push(`import 'package:${packageName}/${cls.filePath}.dart';`);
        } else {
            // ‰ΩøÁî®ÈªòËÆ§ÁöÑmodelsË∑ØÂæÑÔºàÊñ∞ÁîüÊàêÁöÑÊñá‰ª∂Ôºâ
            const snakeClassName = cls.name.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`).replace(/^_/, '') + '_entity';
            imports.push(`import 'package:${packageName}/models/${snakeClassName}.dart';`);
        }
    }
    return imports;
}

// ËøêË°åÊµãËØï
async function runTest() {
    const { testDir, entityFiles } = setupTestEnvironment();
    
    console.log('üìÅ Created test environment with files:');
    entityFiles.forEach(entity => {
        console.log(`   üìÑ ${entity.path} (${entity.className})`);
    });
    
    console.log('\nüîç Scanning existing models...');
    const existingModels = await scanExistingModels(testDir, 'lib');
    
    console.log('üìä Scanned models with paths:');
    existingModels.forEach(model => {
        console.log(`   ‚úÖ ${model.className} -> ${model.filePath}`);
    });
    
    console.log('\nüì¶ Generating imports...');
    
    // Ê®°ÊãüÊñ∞ÁîüÊàêÁöÑclasses
    const newClasses = [
        { name: 'Order', properties: [], nestedClasses: [] },
        { name: 'OrderItem', properties: [], nestedClasses: [] }
    ];
    
    // ÂêàÂπ∂ÊâÄÊúâclasses
    const allClasses = [
        ...newClasses,
        ...existingModels.map(model => ({
            name: model.className.replace(/Entity$/, ''),
            properties: [],
            nestedClasses: [],
            filePath: model.filePath
        }))
    ];
    
    const imports = generateImports(allClasses, 'test_app');
    
    console.log('üìã Generated import statements:');
    imports.forEach(imp => {
        console.log(`   ${imp}`);
    });
    
    console.log('\n‚úÖ Verification:');
    console.log('‚Ä¢ Original paths preserved (lib/modal/response/...)');
    console.log('‚Ä¢ New files use default path (lib/models/...)');
    console.log('‚Ä¢ All paths are correctly formatted for package imports');
    
    // Ê∏ÖÁêÜ
    fs.rmSync(testDir, { recursive: true, force: true });
    
    console.log('\nüéâ Test completed successfully!');
}

runTest().catch(console.error);
