const { JsonParser } = require('./out/parsers/JsonParser');
const { DartCodeGenerator } = require('./out/generators/DartCodeGenerator');

console.log('üîß Testing Dynamic Type Fix - No Unnecessary ? on Dynamic\n');

// ÊµãËØïÂåÖÂê´dynamicÂ≠óÊÆµÁöÑJSON
const testJson = `{
  "user_media_stream_list": null,
  "background_image_url": "http://example.com/bg.jpg",
  "mixed_data": {
    "some_field": "value"
  },
  "dynamic_array": [1, "string", true],
  "normal_string": "test"
}`;

console.log('üéØ Expected Dynamic Type Handling:');
console.log('‚Ä¢ dynamic fields without ? mark: dynamic userMediaStreamList;');
console.log('‚Ä¢ dynamic fields without null checks');
console.log('‚Ä¢ Other types with proper ? marks and null checks');
console.log('‚Ä¢ No "unnecessary_question_mark" warnings\n');

// ÂàùÂßãÂåñËß£ÊûêÂô®ÂíåÁîüÊàêÂô®
const parser = new JsonParser();
const generator = new DartCodeGenerator({
    nullSafety: true,
    useJsonAnnotation: true,
    classNameSuffix: 'Entity',
    generatedPath: 'lib/generated/json',
    entityPath: 'lib/models',
    scanPath: 'lib'
}, 'XLive');

try {
    // 1. Ëß£ÊûêJSON
    console.log('1. üîç Parsing JSON with dynamic fields...');
    const rootClass = parser.parseJson(testJson, 'Test');
    
    // Ê£ÄÊü•Ëß£ÊûêÁöÑÂ≠óÊÆµÁ±ªÂûã
    console.log('Parsed fields:');
    rootClass.properties.forEach(prop => {
        console.log(`   ${prop.name}: ${prop.dartType} (isArray: ${prop.isArray}, isNestedObject: ${prop.isNestedObject})`);
    });
    console.log('');

    // 2. ÁîüÊàêHelperÊñá‰ª∂
    console.log('2. üîß Generating Helper File...');
    const helperCode = generator.generateHelperFile(rootClass);
    
    console.log('Helper File Code:');
    console.log('='.repeat(100));
    console.log(helperCode);
    console.log('='.repeat(100));

    // 3. ÂàÜÊûêdynamicÁ±ªÂûãÂ§ÑÁêÜ
    console.log('\n3. üìä Dynamic Type Analysis:');
    const helperLines = helperCode.split('\n');
    
    // Ê£ÄÊü•dynamicÂ≠óÊÆµÂ£∞ÊòéÔºà‰∏çÂ∫îËØ•Êúâ?Ôºâ
    const dynamicDeclarations = helperLines.filter(line => 
        line.includes('final dynamic ') && line.trim().endsWith(';')
    );
    console.log(`‚úÖ Dynamic field declarations: ${dynamicDeclarations.length}`);
    dynamicDeclarations.forEach(line => console.log(`   ${line.trim()}`));
    
    // Ê£ÄÊü•ÈîôËØØÁöÑdynamic?Â£∞Êòé
    const wrongDynamicDeclarations = helperLines.filter(line => 
        line.includes('final dynamic?') || line.includes('dynamic? ')
    );
    console.log(`\nüö´ Wrong dynamic? declarations: ${wrongDynamicDeclarations.length} (should be 0)`);
    if (wrongDynamicDeclarations.length > 0) {
        wrongDynamicDeclarations.forEach(line => console.log(`   ‚ùå ${line.trim()}`));
    }
    
    // Ê£ÄÊü•dynamicÂ≠óÊÆµÁöÑËµãÂÄºÔºà‰∏çÂ∫îËØ•ÊúânullÊ£ÄÊü•Ôºâ
    const dynamicAssignments = helperLines.filter(line => 
        line.includes('userMediaStreamList = ') && !line.includes('if (')
    );
    console.log(`\n‚úÖ Direct dynamic assignments: ${dynamicAssignments.length}`);
    dynamicAssignments.forEach(line => console.log(`   ${line.trim()}`));
    
    // Ê£ÄÊü•ÂÖ∂‰ªñÁ±ªÂûãÁöÑnullÊ£ÄÊü•
    const nullChecks = helperLines.filter(line => 
        line.includes('if (') && line.includes('!= null)')
    );
    console.log(`\n‚úÖ Null checks for other types: ${nullChecks.length}`);
    nullChecks.slice(0, 3).forEach(line => console.log(`   ${line.trim()}`));
    if (nullChecks.length > 3) {
        console.log(`   ... and ${nullChecks.length - 3} more`);
    }

    // 4. È™åËØÅ‰øÆÂ§çÁªìÊûú
    console.log('\n4. ‚úÖ Fix Verification:');
    
    const checks = [
        { 
            name: 'Dynamic fields without ?', 
            passed: dynamicDeclarations.length > 0 && wrongDynamicDeclarations.length === 0,
            details: `${dynamicDeclarations.length} correct, ${wrongDynamicDeclarations.length} wrong`
        },
        { 
            name: 'Direct dynamic assignments', 
            passed: dynamicAssignments.length > 0,
            details: `Found ${dynamicAssignments.length} direct assignments`
        },
        { 
            name: 'Null checks for other types', 
            passed: nullChecks.length > 0,
            details: `Found ${nullChecks.length} null checks for non-dynamic types`
        }
    ];
    
    const passedChecks = checks.filter(check => check.passed).length;
    const totalChecks = checks.length;
    
    console.log(`Score: ${passedChecks}/${totalChecks} (${((passedChecks/totalChecks)*100).toFixed(1)}%)`);
    
    checks.forEach(check => {
        console.log(`   ${check.passed ? '‚úÖ' : '‚ùå'} ${check.name}: ${check.details}`);
    });
    
    if (passedChecks === totalChecks) {
        console.log('\nüéâ PERFECT: Dynamic type handling is fixed!');
        console.log('   ‚Ä¢ No unnecessary ? on dynamic types');
        console.log('   ‚Ä¢ Direct assignment for dynamic fields');
        console.log('   ‚Ä¢ Proper null checks for other types');
        console.log('   ‚Ä¢ Should eliminate "unnecessary_question_mark" warnings');
    } else {
        console.log('\n‚ö†Ô∏è  DYNAMIC TYPE ISSUES DETECTED:');
        const failedChecks = checks.filter(check => !check.passed);
        failedChecks.forEach(check => {
            console.log(`   ‚Ä¢ ${check.name}: ${check.details}`);
        });
    }

    console.log('\nüìä Summary:');
    console.log(`   ‚Ä¢ ${dynamicDeclarations.length} correct dynamic declarations`);
    console.log(`   ‚Ä¢ ${wrongDynamicDeclarations.length} wrong dynamic? declarations (should be 0)`);
    console.log(`   ‚Ä¢ ${dynamicAssignments.length} direct dynamic assignments`);
    console.log(`   ‚Ä¢ ${nullChecks.length} null checks for other types`);
    console.log(`   ‚Ä¢ ${passedChecks}/${totalChecks} checks passed`);

} catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error(error.stack);
}
